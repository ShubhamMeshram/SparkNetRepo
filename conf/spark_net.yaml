params:
  usr_api_endpoint: "https://619ca0ea68ebaa001753c9b0.mockapi.io/evaluation/dataengineer/jr/v1/users"
  msg_api_endpoint: "https://619ca0ea68ebaa001753c9b0.mockapi.io/evaluation/dataengineer/jr/v1/messages"
  usr_json_response: "/home/ubuntu/sparknet/raw/usr_api.json"
  msg_json_response: "/home/ubuntu/sparknet/raw/msg_api.json"

paths:
  # intermediate raw datasets
  usr_api_raw:
    path: 's3a://sparknet-pii-bucket/sparknet/raw/usr_api.json'

  msg_api_raw:
    path: 's3a://sparknet-pii-bucket/sparknet/raw/msg_api.json'

  # Output datasets - sensitive data
  user_recent:
    path: 's3a://sparknet-pii-bucket/sparknet/processed/user/recent'
    format: 'parquet'
  user_archive:
    path: 's3a://sparknet-pii-bucket/sparknet/processed/user/archive/year={str_year}/month={str_month}/day={str_day}'
    format: 'parquet'

  user_subscription_recent:
    path: 's3a://sparknet-pii-bucket/sparknet/processed/user_subscription/recent'
    format: 'parquet'
  user_subscription_archive:
    path: 's3a://sparknet-pii-bucket/sparknet/processed/user_subscription/archive/year={str_year}/month={str_month}/day={str_day}'
    format: 'parquet'

  user_attributes_recent:
    path: 's3a://sparknet-pii-bucket/sparknet/processed/user_attributes/recent'
    format: 'parquet'
  user_attributes_archive:
    path: 's3a://sparknet-pii-bucket/sparknet/processed/user_attributes/archive/year={str_year}/month={str_month}/day={str_day}'
    format: 'parquet'

  msg_recent:
    path: 's3a://sparknet-pii-bucket/sparknet/processed/msg/recent'
    format: 'parquet'
  msg_archive:
    path: 's3a://sparknet-pii-bucket/sparknet/processed/msg/archive/year={str_year}/month={str_month}/day={str_day}'
    format: 'parquet'

  analytics_op_recent:
    path: 's3a://sparknet-pii-bucket/sparknet/processed/analytics_op/recent'
    format: 'csv'
  dq_op_recent:
    path: 's3a://sparknet-pii-bucket/sparknet/processed/dq_op/recent'
    format: 'csv'

# Output datasets - Encrypted data
  user_en_recent:
      path: 's3a://sparknet-nonpii-bucket-appr2/sparknet/processed/user/recent'
      format: 'parquet'

analytics_queries:
    msgs_sent_per_day:
        qry: "SELECT count(*) as msg_cnt,to_date(createdAt) as createdAt_dt FROM msg_df group by createdAt_dt order by msg_cnt desc"
    lonely_users:
        qry: "SELECT distinct(userId) as lonely_usrId FROM usr_df except SELECT distinct(receiverId) FROM msg_df"
    active_sub_cnt:
        qry: "SELECT STRING(count(*)) as actv_sub_cnt from user_sub_df where status =='Active'"
    freemium_users:
        qry: "SELECT distinct(userId) as freemiuim_userId from user_sub_df_slim where status !='Active' intersect SELECT distinct(senderId) as sub_cnt from msg_df"

dq_check_queries:
  null_zip_cnt:
      qry: "SELECT count(*) as null_zip_cnt from usr_df where zipCode is null"
  dup_msgId_cnt:
      qry: "SELECT msgId,count(*) as dup_msgId_cnt from msg_df group by msgId having dup_msgId_cnt > 1"
  dup_usrId_cnt:
      qry: "SELECT userId,count(*) as dup_usrId_cnt from usr_df group by userId having dup_usrId_cnt > 1"
  null_gendr_cnt:
      qry: "SELECT count(*) as null_gendr_cnt from user_attr_df where gender is null"
  null_income_cnt:
      qry: "SELECT count(*) as null_income_cnt from user_attr_df where income is null"
  null_subs_amt_cnt:
      qry: "SELECT count(*) as null_subs_amt_cnt from user_sub_df where amount is null"
  null_subs_status_cnt:
      qry: "SELECT count(*) as null_subs_status_cnt from user_sub_df where status  is null"